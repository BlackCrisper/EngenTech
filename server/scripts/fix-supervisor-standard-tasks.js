import { getConnection } from '../config/database.js';

async function fixSupervisorStandardTasks() {
  try {
    console.log('üîß Corrigindo permiss√µes - SUPERVISOR pode deletar tarefas padr√£o...');
    
    const pool = await getConnection();
    
    // 1. Verificar se a permiss√£o standard-tasks.delete existe
    console.log('üìù Verificando permiss√£o standard-tasks.delete...');
    
    const permissionExists = await pool.request().query(`
      SELECT COUNT(*) as count FROM Permissions WHERE name = 'standard-tasks.delete'
    `);
    
    if (permissionExists.recordset[0].count === 0) {
      console.log('‚ûï Criando permiss√£o standard-tasks.delete...');
      await pool.request().query(`
        INSERT INTO Permissions (name, description, resource, action) 
        VALUES ('standard-tasks.delete', 'Excluir tarefas padr√£o', 'standard-tasks', 'delete')
      `);
      console.log('‚úÖ Permiss√£o standard-tasks.delete criada');
    } else {
      console.log('‚úÖ Permiss√£o standard-tasks.delete j√° existe');
    }
    
    // 2. Adicionar permiss√£o de deletar tarefas padr√£o para SUPERVISOR
    console.log('üë• Adicionando permiss√£o para SUPERVISOR...');
    
    const supervisorPermission = await pool.request().query(`
      SELECT COUNT(*) as count
      FROM RolePermissions rp
      JOIN Permissions p ON rp.permissionId = p.id
      WHERE rp.role = 'supervisor' AND p.name = 'standard-tasks.delete'
    `);
    
    if (supervisorPermission.recordset[0].count === 0) {
      await pool.request().query(`
        INSERT INTO RolePermissions (role, permissionId)
        SELECT 'supervisor', id FROM Permissions WHERE name = 'standard-tasks.delete'
      `);
      console.log('‚úÖ Permiss√£o adicionada para SUPERVISOR');
    } else {
      console.log('‚úÖ SUPERVISOR j√° tem permiss√£o para deletar tarefas padr√£o');
    }
    
    // 3. Verificar resultado final
    console.log('\nüîç Verificando resultado final...');
    
    const finalResult = await pool.request().query(`
      SELECT p.name, rp.role, rp.granted
      FROM Permissions p
      JOIN RolePermissions rp ON p.id = rp.permissionId
      WHERE p.name = 'standard-tasks.delete'
      ORDER BY rp.role
    `);
    
    console.log('\nüìä Quem pode deletar tarefas padr√£o:');
    finalResult.recordset.forEach(perm => {
      const status = perm.granted ? '‚úÖ PODE' : '‚ùå N√ÉO PODE';
      console.log(`   ${perm.role}: ${status} deletar tarefas padr√£o`);
    });
    
    // 4. Verificar permiss√µes de tarefas normais tamb√©m
    console.log('\nüìä Quem pode deletar tarefas normais:');
    const normalTasksResult = await pool.request().query(`
      SELECT p.name, rp.role, rp.granted
      FROM Permissions p
      JOIN RolePermissions rp ON p.id = rp.permissionId
      WHERE p.name = 'tasks.delete'
      ORDER BY rp.role
    `);
    
    normalTasksResult.recordset.forEach(perm => {
      const status = perm.granted ? '‚úÖ PODE' : '‚ùå N√ÉO PODE';
      console.log(`   ${perm.role}: ${status} deletar tarefas normais`);
    });
    
    console.log('\n‚úÖ Corre√ß√£o conclu√≠da!');
    console.log('üõ°Ô∏è  Agora as permiss√µes est√£o corretas:');
    console.log('   - ADMIN: Pode deletar tarefas normais e padr√£o');
    console.log('   - SUPERVISOR: Pode deletar tarefas normais E padr√£o');
    console.log('   - ENGINEER: N√ÉO pode deletar tarefas');
    console.log('   - OPERATOR: N√ÉO pode deletar tarefas');
    console.log('   - VIEWER: N√ÉO pode deletar tarefas (apenas visualizar)');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir permiss√µes:', error);
  } finally {
    process.exit(0);
  }
}

fixSupervisorStandardTasks();
