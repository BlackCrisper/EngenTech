import { getConnection } from '../config/database.js';

async function removeSampleData() {
  try {
    console.log('üßπ Removendo dados de exemplo do banco...');
    console.log('‚ö†Ô∏è  Sistema SESMT ser√° mantido intacto');
    
    const pool = await getConnection();
    
    // Lista de remo√ß√µes em ordem (respeitando foreign keys)
    // N√ÉO incluir tabelas SESMT pois s√£o necess√°rias
    const removals = [
      {
        table: 'TaskHistory',
        condition: '1=1', // Remove todos os hist√≥ricos de exemplo
        description: 'Hist√≥rico de tarefas de exemplo'
      },
      {
        table: 'EquipmentTasks', 
        condition: '1=1', // Remove todas as tarefas de exemplo
        description: 'Tarefas de equipamentos de exemplo'
      },
      {
        table: 'StandardTasks',
        condition: '1=1', // Remove todas as tarefas padr√£o de exemplo
        description: 'Tarefas padr√£o de exemplo'
      },
      {
        table: 'ProgressHistory',
        condition: '1=1', // Remove todo o hist√≥rico de progresso de exemplo
        description: 'Hist√≥rico de progresso de exemplo'
      },
      {
        table: 'Progress',
        condition: 'equipmentId IN (1,2,3,4,5)', // Remove progresso dos equipamentos de exemplo
        description: 'Progresso de equipamentos de exemplo'
      },
      {
        table: 'Equipment',
        condition: "equipmentTag IN ('MOINHO-01', 'MOINHO-02', 'ESTEIRA-01', 'ESTEIRA-02', 'BOMBA-HIDR-01', 'BOMBA-HIDR-02', 'BOMBA-HIDR-03', 'COMPRESSOR-01', 'COMPRESSOR-02', 'TRANSFORMADOR-01', 'SILO-01', 'SILO-02', 'FORNO-01')",
        description: 'Equipamentos de exemplo'
      },
      {
        table: 'Areas',
        condition: "name IN ('√Årea de Produ√ß√£o A', '√Årea de Produ√ß√£o B', 'Esta√ß√£o de Ensacamento', 'Laborat√≥rio de Qualidade', '√Årea de Armazenamento', 'Subesta√ß√£o El√©trica', 'Sistema de √Ågua', 'Sistema de Ar Comprimido')",
        description: '√Åreas de exemplo'
      },
      {
        table: 'Users',
        condition: "username IN ('joao.silva', 'maria.santos')",
        description: 'Usu√°rios de exemplo (exceto admin)'
      },
      {
        table: 'DashboardMetrics',
        condition: '1=1', // Remove todas as m√©tricas de exemplo
        description: 'M√©tricas do dashboard de exemplo'
      }
    ];

    console.log('üóëÔ∏è  Iniciando remo√ß√£o de dados de exemplo...\n');
    
    for (const removal of removals) {
      try {
        // Verificar se h√° dados para remover
        const countQuery = await pool.request().query(`SELECT COUNT(*) as count FROM ${removal.table} WHERE ${removal.condition}`);
        const count = countQuery.recordset[0].count;
        
        if (count === 0) {
          console.log(`‚ö†Ô∏è  ${removal.description}: Nenhum registro encontrado`);
          continue;
        }
        
        console.log(`üóëÔ∏è  Removendo ${removal.description}... (${count} registros)`);
        
        // Executar a remo√ß√£o
        await pool.request().query(`DELETE FROM ${removal.table} WHERE ${removal.condition}`);
        
        console.log(`‚úÖ ${removal.description} removido com sucesso!`);
        
      } catch (error) {
        console.error(`‚ùå Erro ao remover ${removal.description}:`, error.message);
      }
    }

    // Verificar dados SESMT (apenas informativo, n√£o remove)
    console.log('\nüîç Verificando dados SESMT (ser√£o mantidos)...');
    
    const sesmtTables = [
      'SESMTOccurrenceTypes',
      'SESMTOccurrences',
      'SESMTOccurrenceHistory',
      'SESMTOccurrenceComments'
    ];

    for (const table of sesmtTables) {
      try {
        const countQuery = await pool.request().query(`SELECT COUNT(*) as count FROM ${table}`);
        const count = countQuery.recordset[0].count;
        console.log(`üìä ${table}: ${count} registros (mantidos)`);
      } catch (error) {
        console.error(`‚ùå Erro ao verificar ${table}:`, error.message);
      }
    }

    // Remover colunas de hierarquia se n√£o estiverem sendo usadas
    console.log('\nüîß Verificando colunas de hierarquia...');
    
    try {
      // Verificar se h√° equipamentos com hierarquia
      const hierarchyCount = await pool.request().query(`
        SELECT COUNT(*) as count 
        FROM Equipment 
        WHERE parentId IS NOT NULL OR equipmentType != 'child'
      `);
      
      if (hierarchyCount.recordset[0].count === 0) {
        console.log('‚ö†Ô∏è  Nenhum equipamento com hierarquia encontrado');
        console.log('üí° Voc√™ pode remover as colunas de hierarquia se n√£o precisar delas');
        console.log('   - parentId');
        console.log('   - equipmentType'); 
        console.log('   - hierarchyLevel');
      } else {
        console.log(`üìä ${hierarchyCount.recordset[0].count} equipamentos com hierarquia encontrados`);
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar hierarquia:', error.message);
    }

    console.log('\n‚úÖ Limpeza de dados de exemplo conclu√≠da!');
    console.log('üìä Banco de dados limpo e pronto para uso.');
    console.log('üõ°Ô∏è  Sistema SESMT mantido intacto.');
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
  } finally {
    process.exit(0);
  }
}

removeSampleData();
