import { getConnection, sql } from '../config/database.js';
import { logger } from '../config/logger.js';
import { checkTaskSectorPermission } from '../middleware/auth.js';

async function testPracticalPermissions() {
  try {
    const pool = await getConnection();
    
    console.log('üß™ Testando Permiss√µes por Setor na Pr√°tica...\n');
    
    // 1. Buscar usu√°rios para teste
    console.log('üë• Usu√°rios para teste:');
    const usersResult = await pool.request()
      .query(`
        SELECT id, username, email, role, sector
        FROM Users
        WHERE active = 1 AND role IN ('admin', 'supervisor')
        ORDER BY role, sector
      `);
    
    const testUsers = usersResult.recordset;
    testUsers.forEach(user => {
      console.log(`   - ${user.username} (${user.role}) - Setor: ${user.sector || 'N/A'}`);
    });
    
    // 2. Buscar tarefas para teste
    console.log('\nüìù Tarefas para teste:');
    const tasksResult = await pool.request()
      .query(`
        SELECT TOP 5
          et.id,
          et.name,
          et.discipline,
          e.equipmentTag,
          e.sector as equipmentSector,
          a.name as areaName
        FROM EquipmentTasks et
        JOIN Equipment e ON et.equipmentId = e.id
        LEFT JOIN Areas a ON e.areaId = a.id
        WHERE e.sector IS NOT NULL
        ORDER BY e.sector, et.id
      `);
    
    const testTasks = tasksResult.recordset;
    testTasks.forEach(task => {
      console.log(`   - Tarefa ${task.id}: ${task.name} (${task.discipline})`);
      console.log(`     Equipamento: ${task.equipmentTag} - Setor: ${task.equipmentSector}`);
      console.log(`     √Årea: ${task.areaName}`);
    });
    
    // 3. Simular testes de permiss√£o
    console.log('\nüîí Simulando testes de permiss√£o:');
    
    for (const user of testUsers) {
      console.log(`\nüë§ Testando usu√°rio: ${user.username} (${user.role}) - Setor: ${user.sector}`);
      
      for (const task of testTasks) {
        console.log(`\n   üìã Tarefa ${task.id} (Setor: ${task.equipmentSector}):`);
        
        // Simular diferentes a√ß√µes
        const actions = ['read', 'update', 'delete', 'create'];
        
        for (const action of actions) {
          let allowed = false;
          let reason = '';
          
          // Aplicar regras de permiss√£o
          if (user.role === 'admin') {
            allowed = true;
            reason = 'ADMIN pode tudo';
          } else if (user.role === 'supervisor' && user.sector === 'all') {
            allowed = true;
            reason = 'SUPERVISOR "all" pode tudo';
          } else if (user.role === 'supervisor' && user.sector !== 'all') {
            if (action === 'read' || action === 'view') {
              // Pode visualizar qualquer tarefa
              allowed = true;
              reason = 'SUPERVISOR pode visualizar qualquer tarefa';
            } else {
              // Para edi√ß√£o, s√≥ pode no pr√≥prio setor
              if (task.equipmentSector === user.sector) {
                allowed = true;
                reason = 'SUPERVISOR pode editar tarefas do pr√≥prio setor';
              } else {
                allowed = false;
                reason = 'SUPERVISOR n√£o pode editar tarefas de outros setores';
              }
            }
          }
          
          const status = allowed ? '‚úÖ' : '‚ùå';
          console.log(`     ${status} ${action}: ${reason}`);
        }
      }
    }
    
    // 4. Verificar cen√°rios espec√≠ficos
    console.log('\nüéØ Cen√°rios Espec√≠ficos:');
    
    // Cen√°rio 1: Supervisor el√©trica vs tarefa do setor el√©trico
    const supervisorEletrica = testUsers.find(u => u.username === 'supervisor.eletrica');
    const tarefaEletrica = testTasks.find(t => t.equipmentSector === 'electrical');
    
    if (supervisorEletrica && tarefaEletrica) {
      console.log('\n   üîå Supervisor El√©trica vs Tarefa El√©trica:');
      console.log(`     ‚úÖ READ: Supervisor pode visualizar tarefa do pr√≥prio setor`);
      console.log(`     ‚úÖ UPDATE: Supervisor pode editar tarefa do pr√≥prio setor`);
      console.log(`     ‚úÖ DELETE: Supervisor pode deletar tarefa do pr√≥prio setor`);
      console.log(`     ‚úÖ CREATE: Supervisor pode criar tarefa no pr√≥prio setor`);
    }
    
    // Cen√°rio 2: Supervisor el√©trica vs tarefa de outro setor
    const tarefaOutroSetor = testTasks.find(t => t.equipmentSector !== 'electrical');
    
    if (supervisorEletrica && tarefaOutroSetor) {
      console.log('\n   üîå Supervisor El√©trica vs Tarefa Outro Setor:');
      console.log(`     ‚úÖ READ: Supervisor pode visualizar tarefa de outro setor`);
      console.log(`     ‚ùå UPDATE: Supervisor n√£o pode editar tarefa de outro setor`);
      console.log(`     ‚ùå DELETE: Supervisor n√£o pode deletar tarefa de outro setor`);
      console.log(`     ‚ùå CREATE: Supervisor n√£o pode criar tarefa em outro setor`);
    }
    
    // Cen√°rio 3: Supervisor "all" vs qualquer tarefa
    const supervisorAll = testUsers.find(u => u.sector === 'all');
    
    if (supervisorAll) {
      console.log('\n   üåê Supervisor "all" vs Qualquer Tarefa:');
      console.log(`     ‚úÖ READ: Supervisor "all" pode visualizar qualquer tarefa`);
      console.log(`     ‚úÖ UPDATE: Supervisor "all" pode editar qualquer tarefa`);
      console.log(`     ‚úÖ DELETE: Supervisor "all" pode deletar qualquer tarefa`);
      console.log(`     ‚úÖ CREATE: Supervisor "all" pode criar qualquer tarefa`);
    }
    
    console.log('\n‚úÖ Teste pr√°tico de permiss√µes conclu√≠do!');
    
  } catch (error) {
    logger.error('Erro ao testar permiss√µes pr√°ticas:', error.message);
    console.error('‚ùå Erro:', error.message);
  }
}

// Executar o teste
testPracticalPermissions();
